var _user$project$AuthorsView$onChange = function (handler) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'change',
		A2(
			_elm_lang$core$Json_Decode$map,
			handler,
			A2(
				_elm_lang$core$Json_Decode$at,
				{
					ctor: '::',
					_0: 'target',
					_1: {
						ctor: '::',
						_0: 'value',
						_1: {ctor: '[]'}
					}
				},
				_elm_lang$core$Json_Decode$string)));
};
var _user$project$AuthorsView$renderOption = function (x) {
	return A2(
		_elm_lang$html$Html$option,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$value(x),
			_1: {ctor: '[]'}
		},
		{ctor: '[]'});
};
var _user$project$AuthorsView$renderDataLists = function (affiliations) {
	var renderOptions = function (list) {
		return A2(
			_elm_lang$core$List$map,
			_user$project$AuthorsView$renderOption,
			_user$project$Utils$dropDuplicates(list));
	};
	return {
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$datalist,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id('institutions-list'),
				_1: {ctor: '[]'}
			},
			renderOptions(
				A2(
					_elm_lang$core$List$map,
					function (_) {
						return _.institution;
					},
					affiliations))),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$datalist,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$id('countries-list'),
					_1: {ctor: '[]'}
				},
				renderOptions(
					A2(
						_elm_lang$core$List$map,
						function (_) {
							return _.country;
						},
						affiliations))),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$datalist,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$id('cities-list'),
						_1: {ctor: '[]'}
					},
					renderOptions(
						A2(
							_elm_lang$core$List$map,
							function (_) {
								return _.city;
							},
							affiliations))),
				_1: {ctor: '[]'}
			}
		}
	};
};
var _user$project$AuthorsView$renderAffiliation = F3(
	function (model, authorId, _p0) {
		var _p1 = _p0;
		var _p2 = _p1._0;
		var countryDiv = model.showCountry ? A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('aa__field aa__field--tablecell'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$label,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('form__label'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Country'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$select,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('country form__input form__input--dropdown'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$list('countries-list'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$name('country'),
									_1: {
										ctor: '::',
										_0: _user$project$AuthorsView$onChange(
											A2(_user$project$MainMessages$UpdateCountry, authorId, _p2.id)),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onFocus(
												A2(_user$project$MainMessages$SetFocusedIds, authorId, _p2.id)),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$value(_p2.country),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						},
						_user$project$Countries$options(_p2.country)),
					_1: {ctor: '[]'}
				}
			}) : _elm_lang$html$Html$text('');
		var stateDiv = model.showState ? A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('aa__field aa__field--tablecell'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$label,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('form__label'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('State'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$input,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('state form__input'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$list('states-list'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$name('state'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(
											A2(_user$project$MainMessages$UpdateState, authorId, _p2.id)),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onFocus(
												A2(_user$project$MainMessages$SetFocusedIds, authorId, _p2.id)),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$value(_p2.state),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}) : _elm_lang$html$Html$text('');
		var cityDiv = model.showCity ? A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('aa__field aa__field--tablecell'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$label,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('form__label'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('City'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$input,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('city form__input'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$list('cities-list'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$name('city'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(
											A2(_user$project$MainMessages$UpdateCity, authorId, _p2.id)),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onFocus(
												A2(_user$project$MainMessages$SetFocusedIds, authorId, _p2.id)),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$value(_p2.city),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}) : _elm_lang$html$Html$text('');
		var institutionDiv = model.showInstitution ? A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('aa__field aa__field--tablecell'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$label,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('form__label'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('Institution'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$input,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('form__input institution'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$list('institutions-list'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$name('institution'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onInput(
											A2(_user$project$MainMessages$UpdateInstitution, authorId, _p2.id)),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onFocus(
												A2(_user$project$MainMessages$SetFocusedIds, authorId, _p2.id)),
											_1: {
												ctor: '::',
												_0: _user$project$Utils$onKeyDown(
													_user$project$MainMessages$SetAffiliationKeyDown(_p2.id)),
												_1: {
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$value(_p2.institution),
													_1: {ctor: '[]'}
												}
											}
										}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}) : _elm_lang$html$Html$text('');
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('aa__sub-section'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('aa__dividing-title'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('aa__subtitle aa__subtitle--small'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									A2(
										_elm_lang$core$Basics_ops['++'],
										'Affiliation ',
										_elm_lang$core$Basics$toString(_p1._1))),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('remove aa__remove-button button button--secondary button--delete'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(
									A2(_user$project$MainMessages$DeleteAffiliation, authorId, _p2.id)),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Remove Affiliation'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('aa__sub-section aa__sub-section--table'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: institutionDiv,
								_1: {
									ctor: '::',
									_0: cityDiv,
									_1: {
										ctor: '::',
										_0: stateDiv,
										_1: {
											ctor: '::',
											_0: countryDiv,
											_1: {ctor: '[]'}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					}
				}
			});
	});
var _user$project$AuthorsView$renderAffiliations = F3(
	function (model, affiliations, authorId) {
		var affiliationsLength = _elm_lang$core$List$length(affiliations);
		var indexList = A2(_elm_lang$core$List$range, 1, affiliationsLength);
		var affilIndexTuples = A3(
			_elm_lang$core$List$map2,
			F2(
				function (v0, v1) {
					return {ctor: '_Tuple2', _0: v0, _1: v1};
				}),
			affiliations,
			indexList);
		return A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			A2(
				_elm_lang$core$List$map,
				A2(_user$project$AuthorsView$renderAffiliation, model, authorId),
				affilIndexTuples));
	});
var _user$project$AuthorsView$isPresentingfield = F2(
	function (presentingFieldId, authorFieldResponse) {
		return _elm_lang$core$Native_Utils.eq(authorFieldResponse.id, presentingFieldId);
	});
var _user$project$AuthorsView$isAuthorPresenting = F2(
	function (presentingFieldId, author) {
		var presentingFieldResponse = A2(
			_elm_lang$core$Maybe$withDefault,
			_user$project$MainModel$defaultAuthorFieldResponse1,
			_elm_lang$core$List$head(
				A2(
					_elm_lang$core$List$filter,
					_user$project$AuthorsView$isPresentingfield(presentingFieldId),
					author.authorFieldResponses)));
		var isPresenting = _elm_lang$core$Native_Utils.eq(presentingFieldResponse.value, 'true');
		var defaultResponse = {value: 'false'};
		return isPresenting;
	});
var _user$project$AuthorsView$isTrue = function (presenting) {
	return _elm_lang$core$Native_Utils.eq(presenting, true);
};
var _user$project$AuthorsView$disableThePresentingCheckbox = F3(
	function (model, checked, presentingFieldId) {
		var disabled = checked ? false : A2(
			_elm_lang$core$List$any,
			_user$project$AuthorsView$isTrue,
			A2(
				_elm_lang$core$List$map,
				_user$project$AuthorsView$isAuthorPresenting(presentingFieldId),
				model.authors));
		return disabled;
	});
var _user$project$AuthorsView$renderFieldResponses = F4(
	function (model, authorFieldResponses, authorId, authorField) {
		var labelX = (!_elm_lang$core$Native_Utils.eq(authorField.description, '')) ? A2(
			_elm_lang$html$Html$label,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('form__label tooltip'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$for(authorField.title),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(authorField.title),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$span,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('tooltip__box'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(authorField.description),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}) : A2(
			_elm_lang$html$Html$label,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('form__label'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text(authorField.title),
				_1: {ctor: '[]'}
			});
		var authorFieldResponse = A2(
			_elm_lang$core$Maybe$withDefault,
			_user$project$MainModel$defaultAuthorFieldResponse1,
			_elm_lang$core$List$head(
				A2(
					_elm_lang$core$List$filter,
					function (a) {
						return _elm_lang$core$Native_Utils.eq(a.authorFieldId, authorField.id);
					},
					authorFieldResponses)));
		var inputHtml = _elm_lang$core$Native_Utils.eq(authorField.inputType, _user$project$MainModel$BoolType) ? A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('aa__field aa__field--tablecell'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: labelX,
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$input,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$type_('checkbox'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$id(authorField.title),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('form__input'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$checked(
											_elm_lang$core$Native_Utils.eq(authorFieldResponse.value, 'true')),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Events$onClick(
												A2(_user$project$MainMessages$UpdateAuthorFieldBool, authorId, authorField.id)),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}) : (_elm_lang$core$Native_Utils.eq(authorField.inputType, _user$project$MainModel$SinglePresenterType) ? A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('aa__field aa__field--tablecell'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: labelX,
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$input,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$type_('checkbox'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$id(authorField.title),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('form__input'),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$checked(
											_elm_lang$core$Native_Utils.eq(authorFieldResponse.value, 'true')),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$disabled(
												A3(
													_user$project$AuthorsView$disableThePresentingCheckbox,
													model,
													_elm_lang$core$Native_Utils.eq(authorFieldResponse.value, 'true'),
													authorField.id)),
											_1: {
												ctor: '::',
												_0: _elm_lang$html$Html_Events$onClick(
													A2(_user$project$MainMessages$UpdateAuthorFieldBool, authorId, authorField.id)),
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}) : A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('aa__field aa__field--tablecell'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: labelX,
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$input,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$type_('text'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('form__input'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onInput(
										A2(_user$project$MainMessages$UpdateAuthorFieldString, authorId, authorField.id)),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$value(authorFieldResponse.value),
										_1: {ctor: '[]'}
									}
								}
							}
						},
						{ctor: '[]'}),
					_1: {ctor: '[]'}
				}
			}));
		return inputHtml;
	});
var _user$project$AuthorsView$renderFieldResponsesLine = F4(
	function (model, authorFieldResponses, authorId, authorFieldLine) {
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('aa__sub-section aa__sub-section--table'),
				_1: {ctor: '[]'}
			},
			A2(
				_elm_lang$core$List$map,
				A3(_user$project$AuthorsView$renderFieldResponses, model, authorFieldResponses, authorId),
				authorFieldLine));
	});
var _user$project$AuthorsView$renderAuthor = F2(
	function (model, _p3) {
		var _p4 = _p3;
		var _p5 = _p4._0;
		var chunkifiedAuthorFields = A2(_krisajenkins$elm_exts$Exts_List$chunk, 3, model.authorFields);
		var addAffiliationButton = (_elm_lang$core$Native_Utils.cmp(
			model.affiliationLimit,
			_elm_lang$core$List$length(_p5.affiliations)) > 0) ? A2(
			_elm_lang$html$Html$button,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('add-affiliation-to-author button button--secondary'),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Events$onClick(
						_user$project$MainMessages$AddAffiliation(_p5.id)),
					_1: {ctor: '[]'}
				}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('+ Add Affiliation'),
				_1: {ctor: '[]'}
			}) : A2(
			_elm_lang$html$Html$div,
			{ctor: '[]'},
			{ctor: '[]'});
		return A2(
			_elm_lang$html$Html$div,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$class('author aa'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$div,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('aa__dividing-title'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$span,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('aa__subtitle'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text(
									A2(
										_elm_lang$core$Basics_ops['++'],
										'Author ',
										_elm_lang$core$Basics$toString(_p4._1))),
								_1: {ctor: '[]'}
							}),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$class('remove aa__remove-button aa__remove-button--top-indent button button--secondary button--delete'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Events$onClick(
									_user$project$MainMessages$DeleteAuthor(_p5.id)),
								_1: {ctor: '[]'}
							}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text(
								A2(
									_elm_lang$core$Basics_ops['++'],
									'Remove Author ',
									_elm_lang$core$Basics$toString(_p5.id))),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$class('aa__sub-section aa__sub-section--table'),
								_1: {ctor: '[]'}
							},
							{
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$class('aa__field aa__field--tablecell'),
										_1: {ctor: '[]'}
									},
									A2(
										_elm_lang$core$List$map,
										A3(_user$project$AuthorsView$renderFieldResponsesLine, model, _p5.authorFieldResponses, _p5.id),
										chunkifiedAuthorFields)),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$class('aa__inner-container'),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$class('aa__dividing-title aa__dividing-title--linebreak'),
											_1: {ctor: '[]'}
										},
										{
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$span,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$class('aa__subtitle'),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _elm_lang$html$Html$text(
														A2(
															_elm_lang$core$Basics_ops['++'],
															'Author ',
															A2(
																_elm_lang$core$Basics_ops['++'],
																_elm_lang$core$Basics$toString(_p5.id),
																' Affiliations'))),
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A3(_user$project$AuthorsView$renderAffiliations, model, _p5.affiliations, _p5.id),
										_1: {
											ctor: '::',
											_0: addAffiliationButton,
											_1: {ctor: '[]'}
										}
									}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			});
	});
var _user$project$AuthorsView$authorDataClass = 'ma2';
var _user$project$AuthorsView$renderAuthors = function (model) {
	var addAuthorButton = (_elm_lang$core$Native_Utils.cmp(
		model.authorLimit,
		_elm_lang$core$List$length(model.authors)) > 0) ? A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class('button button--secondary aa__add-author-button'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onClick(_user$project$MainMessages$AddAuthor),
				_1: {ctor: '[]'}
			}
		},
		{
			ctor: '::',
			_0: _elm_lang$html$Html$text('Add Another Author'),
			_1: {ctor: '[]'}
		}) : A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{ctor: '[]'});
	var authorIndexTuples = A3(
		_elm_lang$core$List$map2,
		F2(
			function (v0, v1) {
				return {ctor: '_Tuple2', _0: v0, _1: v1};
			}),
		model.authors,
		A2(
			_elm_lang$core$List$range,
			1,
			_elm_lang$core$List$length(model.authors)));
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$class(model.$class),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$div,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$class(''),
					_1: {ctor: '[]'}
				},
				A2(
					_elm_lang$core$List$map,
					_user$project$AuthorsView$renderAuthor(model),
					authorIndexTuples)),
			_1: {
				ctor: '::',
				_0: addAuthorButton,
				_1: {ctor: '[]'}
			}
		});
};
var _user$project$AuthorsView$view = function (model) {
	var authors = _user$project$Encoders$authors(model.authors);
	return A2(
		_elm_lang$html$Html$div,
		{ctor: '[]'},
		{
			ctor: '::',
			_0: _user$project$AuthorsView$renderAuthors(model),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$input,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$class('hidden'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$id('authorsArray'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$name('authorsArray'),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$value(authors),
									_1: {ctor: '[]'}
								}
							}
						}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text(authors),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$div,
						{ctor: '[]'},
						_user$project$AuthorsView$renderDataLists(
							_user$project$MainUpdate$getBlurredAuthorAffiliations(model))),
					_1: {ctor: '[]'}
				}
			}
		});
};
