var _user$project$MainUpdate$updateIfHasId = F3(
	function (list, id, change) {
		var changeIfHasId = function (a) {
			return _elm_lang$core$Native_Utils.eq(a.id, id) ? change(a) : a;
		};
		return A2(_elm_lang$core$List$map, changeIfHasId, list);
	});
var _user$project$MainUpdate$getAuthorUpdate = F3(
	function (model, id, change) {
		return A3(_user$project$MainUpdate$updateIfHasId, model.authors, id, change);
	});
var _user$project$MainUpdate$getAffiliationUpdate = F4(
	function (model, authorId, affiliationId, change) {
		var updateAffiliation = function (author) {
			return _elm_lang$core$Native_Utils.update(
				author,
				{
					affiliations: A3(_user$project$MainUpdate$updateIfHasId, author.affiliations, affiliationId, change)
				});
		};
		return A3(_user$project$MainUpdate$getAuthorUpdate, model, authorId, updateAffiliation);
	});
var _user$project$MainUpdate$updateAuthor = F3(
	function (model, id, change) {
		var updatedAuthors = A3(_user$project$MainUpdate$updateIfHasId, model.authors, id, change);
		var encodedAuthors = _user$project$Encoders$authors(updatedAuthors);
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				model,
				{authors: updatedAuthors}),
			_1: _user$project$Ports$checkAuthorsComplete(encodedAuthors)
		};
	});
var _user$project$MainUpdate$updateAffiliation = F4(
	function (model, authorId, affiliationId, change) {
		var updateAffiliation = function (author) {
			return _elm_lang$core$Native_Utils.update(
				author,
				{
					affiliations: A3(_user$project$MainUpdate$updateIfHasId, author.affiliations, affiliationId, change)
				});
		};
		return A3(_user$project$MainUpdate$updateAuthor, model, authorId, updateAffiliation);
	});
var _user$project$MainUpdate$updateAuthorFieldResponse = F4(
	function (model, authorId, authorFieldId, change) {
		var updateAuthorFieldResponse = function (author) {
			return _elm_lang$core$Native_Utils.update(
				author,
				{
					authorFieldResponses: A3(_user$project$MainUpdate$updateIfHasId, author.authorFieldResponses, authorFieldId, change)
				});
		};
		return A3(_user$project$MainUpdate$updateAuthor, model, authorId, updateAuthorFieldResponse);
	});
var _user$project$MainUpdate$getBlurredAuthorAffiliations = function (model) {
	return _elm_lang$core$List$concat(
		A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.affiliations;
			},
			A2(
				_elm_lang$core$List$filter,
				function (a) {
					return !_elm_lang$core$Native_Utils.eq(a.id, model.focusedAuthorId);
				},
				model.authors)));
};
var _user$project$MainUpdate$update = F2(
	function (msg, model) {
		var encodedAuthors = _user$project$Encoders$authors(model.authors);
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'AddAuthor':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							authorMaxId: model.authorMaxId + 1,
							authors: A2(
								_elm_lang$core$Basics_ops['++'],
								model.authors,
								{
									ctor: '::',
									_0: A2(
										_user$project$MainModel$blankAuthor,
										model.authorMaxId + 1,
										A2(
											_elm_lang$core$List$range,
											0,
											_elm_lang$core$List$length(model.authorFields) + 1)),
									_1: {ctor: '[]'}
								})
						}),
					_1: _user$project$Ports$checkAuthorsComplete(encodedAuthors)
				};
			case 'NewClass':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{$class: _p0._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'DeleteAuthor':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							authors: A2(
								_elm_lang$core$List$filter,
								function (a) {
									return !_elm_lang$core$Native_Utils.eq(a.id, _p0._0);
								},
								model.authors)
						}),
					_1: _user$project$Ports$checkAuthorsComplete(encodedAuthors)
				};
			case 'UpdateAuthorFieldString':
				var change = function (field) {
					return _elm_lang$core$Native_Utils.update(
						field,
						{value: _p0._2});
				};
				return A4(_user$project$MainUpdate$updateAuthorFieldResponse, model, _p0._0, _p0._1, change);
			case 'UpdateAuthorFieldBool':
				var change = function (field) {
					return _elm_lang$core$Native_Utils.eq(field.value, 'true') ? _elm_lang$core$Native_Utils.update(
						field,
						{value: 'false'}) : _elm_lang$core$Native_Utils.update(
						field,
						{value: 'true'});
				};
				return A4(_user$project$MainUpdate$updateAuthorFieldResponse, model, _p0._0, _p0._1, change);
			case 'AddAffiliation':
				var addAffiliation = function (author) {
					return _elm_lang$core$Native_Utils.update(
						author,
						{
							maxAffiliationId: author.maxAffiliationId + 1,
							affiliations: A2(
								_elm_lang$core$Basics_ops['++'],
								author.affiliations,
								{
									ctor: '::',
									_0: _user$project$MainModel$blankAffiliation(author.maxAffiliationId + 1),
									_1: {ctor: '[]'}
								})
						});
				};
				return A3(_user$project$MainUpdate$updateAuthor, model, _p0._0, addAffiliation);
			case 'UpdateInstitution':
				var _p1 = _p0._2;
				var updateInstitution = function (affiliation) {
					if (_elm_lang$core$Native_Utils.eq(model.lastAffiliationKey, -1) && (!_elm_lang$core$Native_Utils.eq(_p1, ''))) {
						var matchingAffiliation = A2(
							_elm_lang$core$Maybe$withDefault,
							A5(_user$project$MainModel$Affiliation, _p1, affiliation.city, affiliation.state, affiliation.country, affiliation.id),
							_elm_lang$core$List$head(
								A2(
									_elm_lang$core$List$filter,
									function (a) {
										return _elm_lang$core$Native_Utils.eq(a.institution, _p1);
									},
									_user$project$MainUpdate$getBlurredAuthorAffiliations(model))));
						return _elm_lang$core$Native_Utils.update(
							affiliation,
							{institution: matchingAffiliation.institution, city: matchingAffiliation.city, state: matchingAffiliation.state, country: matchingAffiliation.country});
					} else {
						return _elm_lang$core$Native_Utils.update(
							affiliation,
							{institution: _p1});
					}
				};
				var updatedAuthors = A4(_user$project$MainUpdate$getAffiliationUpdate, model, _p0._0, _p0._1, updateInstitution);
				var encodedAuthors = _user$project$Encoders$authors(updatedAuthors);
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{authors: updatedAuthors, lastAffiliationKey: -1}),
					_1: _user$project$Ports$checkAuthorsComplete(encodedAuthors)
				};
			case 'UpdateCountry':
				var updateInstitution = function (affiliation) {
					return _elm_lang$core$Native_Utils.update(
						affiliation,
						{country: _p0._2});
				};
				return A4(_user$project$MainUpdate$updateAffiliation, model, _p0._0, _p0._1, updateInstitution);
			case 'UpdateCity':
				var updateInstitution = function (affiliation) {
					return _elm_lang$core$Native_Utils.update(
						affiliation,
						{city: _p0._2});
				};
				return A4(_user$project$MainUpdate$updateAffiliation, model, _p0._0, _p0._1, updateInstitution);
			case 'UpdateState':
				var updateInstitution = function (affiliation) {
					return _elm_lang$core$Native_Utils.update(
						affiliation,
						{state: _p0._2});
				};
				return A4(_user$project$MainUpdate$updateAffiliation, model, _p0._0, _p0._1, updateInstitution);
			case 'DeleteAffiliation':
				var deleteAffiliation = function (author) {
					return _elm_lang$core$Native_Utils.update(
						author,
						{
							affiliations: A2(
								_elm_lang$core$List$filter,
								function (a) {
									return !_elm_lang$core$Native_Utils.eq(a.id, _p0._1);
								},
								author.affiliations)
						});
				};
				return A3(_user$project$MainUpdate$updateAuthor, model, _p0._0, deleteAffiliation);
			case 'SetFocusedIds':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{focusedAuthorId: _p0._0, focusedAffiliationId: _p0._1}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SetAffiliationKeyDown':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{lastAffiliationKey: _p0._1}),
					_1: _user$project$Ports$checkAuthorsComplete(encodedAuthors)
				};
			default:
				var _p2 = _p0._0;
				var authors = A2(
					_elm_lang$core$Result$withDefault,
					model.authors,
					A2(_elm_lang$core$Json_Decode$decodeString, _user$project$Decoders$authorsDecoder, _p2));
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{authors: authors}),
					_1: _user$project$Ports$checkAuthorsComplete(_p2)
				};
		}
	});
